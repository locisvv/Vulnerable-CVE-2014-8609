package com.svv.diplomna;

import android.accounts.AbstractAccountAuthenticator;
import android.accounts.Account;
import android.accounts.AccountAuthenticatorResponse;
import android.accounts.AccountManager;
import android.accounts.NetworkErrorException;
import android.app.PendingIntent;
import android.app.Service;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.os.Message;
import android.util.Log;

public class AccountAuthenticatorService extends Service {
    private static AccountAuthenticatorImpl mAuthenticator = null;
    public static Handler h = new Handler();
    
    public AccountAuthenticatorService() {
        super();
        Log.d("account", "----- constructor ------ ");
    }

    public IBinder onBind(Intent intent) {
        Log.d("account", "----- onBind ------ ");
        return mAuthenticator.getIBinder();
    }

    @Override
    public void onCreate() {
        Log.d("account", "----- onCreate ------ ");
        Handler.Callback hc = new Handler.Callback() {
            public boolean handleMessage(Message msg) {
                Log.d("diplom", "what = " + msg.what);
                return false;
            }
        };
        h = new Handler(hc);

        mAuthenticator = new AccountAuthenticatorImpl(this);

    }

    private static class AccountAuthenticatorImpl extends AbstractAccountAuthenticator {
        private Context mContext;

        public AccountAuthenticatorImpl(Context context) {
            super(context);
            mContext = context;
        }

        @Override
        public Bundle addAccount(AccountAuthenticatorResponse response, String accountType, String authTokenType, String[] requiredFeatures, Bundle options)
                throws NetworkErrorException {
            Log.d("Account", "----- Add account ------ " + System.nanoTime());
            PendingIntent test = options.getParcelable("pendingIntent");

            Intent newIntent2 = new Intent("android.intent.action.MASTER_CLEAR");
            try {
                test.send(mContext, 0, newIntent2, null, h);
            } catch (PendingIntent.CanceledException e) {
                e.printStackTrace();
            }

            final Intent intent = new Intent(mContext, MainActivity.class);
            final Bundle bundle = new Bundle();
            bundle.putParcelable(AccountManager.KEY_INTENT, intent);
            return bundle;
        }

        @Override
        public Bundle confirmCredentials(AccountAuthenticatorResponse response, Account account, Bundle options) {
            return null;
        }

        @Override
        public Bundle editProperties(AccountAuthenticatorResponse response, String accountType) {
            return null;
        }

        @Override
        public Bundle getAuthToken(AccountAuthenticatorResponse response, Account account, String authTokenType, Bundle options) throws NetworkErrorException {
            return null;
        }

        @Override
        public String getAuthTokenLabel(String authTokenType) {
            return null;
        }

        @Override
        public Bundle hasFeatures(AccountAuthenticatorResponse response, Account account, String[] features) throws NetworkErrorException {
            return null;
        }

        @Override
        public Bundle updateCredentials(AccountAuthenticatorResponse response, Account account, String authTokenType, Bundle options) {
            return null;
        }
    }
}